Scheme Definition keywords:
  Config: Holds all the properties of the extention and its interpretation
  Enums: a list of all named values that can be used in a schema, allowing predefined auto-completion
  Schema: a Schema constructor, requires a name property, names must be unique
  Property Tag: an unnamed tag used to populate the keynames properties of a schema and accepts various flags and values
  Child Tag: an unnamed tag used to populate the child properties of a schema and accepts various flags and values, can be an array of objects

Tag Properties:
  Flags:
    string: defines this key property as a string values
    number: defines this key property as a number value
    boolean: defines this key property as a boolean value
    array: defines this key property as an array value
    required: defines this key property as a required value, flag schema model if value missing
    unique: checks the values of this key value, ensuring it is one of a kind

  Values:
    enum: asigns an enum to this input for auto auto-completion
    default: assigns a default value to this key regardless of strict flags
    factor: assigns a factor to this key, requires a number flag and validates the value as MOD this factor

  Comments:
    double slash: // this is a comment
    inline Tag: <Schema (this is a comment) />

Definition Validation:
  Config:
    - multiple: false
    - strings: set the format for strings input, loose to strict, "any" default | "strict" | "single" | "double" | "backtick"
    - headers: allows header comments in Schemas for anchor links, true | false | "enabled" | "disabled"
    - comments: allows comments in Schemas, true | false | "enabled" | "disabled"
    - whitespace: defines auto formatting indentation with a number of spaces, 0-10
  Enums:
    - multiple: false
    - tagName: unique keyname of this enum for reference
    - values: (required) must be an [] array of values, can be string, number, boolean
    - default: (optional) assigns a default value to the enum
    - strict: (optional) sets the enum to strict, only allowing values in the enum (default overrides this)
  Schema:
    - multiple: true
    - name: (required) must be unique
    - unique: (optional) checks the values of this root value name, ensuring each item has a unique name in schema data
  ChildTags:
    - multiple: true
    - name: (required) must be unique to this iteration depth, this is the first string value after initial '<'
    - flags: (optional) unique, required, string, number, boolean, array
    - values: (optional) enum, default, factor
    - comments: (optional) using () to disable values or add comments inline 

Schema Validation:
  SchemeHeader:
    about:  defines the schema template to enforce for this file, must match a schema name="value"
    example: <Schema name="MetaData" />  // not strict on syntax and structure, could be "Schema:MetaData" on line 1
    error: if schema header is missing, error whole document as invalid
  content:
    about: a list of items with child values based on the schema, typically the first string after '<' is the name reference and can be duplicates or unique based on Schema flag

Colors:
  Comments:
    double slash: Color double slash comments as Green
    reset: when using ':' behind a // comment, reset to default color (Green)
    warning: when using ! behind a // comment, change its color to Yellow
    error: when using !! behind a // comment, change its color to Red
    info: when using ? behind a // comment, change its color to Blue
    inline: inside tags, using () colors the text mid Gray, allowing inline comments
  enumValue: Magenta
  requiredFlag: Plum
  uniqueFlag: purple
  stringFlag: Blue
  numberFlag: Teal
  booleanFlag: Green
  arrayFlag:
    color: Yellow
    Tag: The Array Tag name and line color is also Yellow
  ChildTags:
    about: open tags represent a nested object and accept internal tags, Array flag supercedes this
    color: Mint
    Tag: The Tag name and line color is also Mint
